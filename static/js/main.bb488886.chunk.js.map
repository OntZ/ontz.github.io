{"version":3,"sources":["services/Http.ts","services/MachineService.ts","store/machines/machinesActions.ts","store/machines/machinesTypes.ts","components/MachineTile.tsx","pages/MachinesList.tsx","serviceWorker.ts","store/machines/machinesReducer.ts","store/rootReducer.ts","store/index.ts","index.tsx","App.tsx"],"names":["prefix","HTTPError","message","httpStatus","Object","setPrototypeOf","prototype","Error","Http","fetch","url","options","a","async","result","response","status","json","MachineService","getAll","res","machines","getMachinesSuccess","type","payload","MachineTile","machine","onTime","activity","activeHours","idleTime","idleHours","engineTime","offTime","chartData","colorScale","push","x","toFixed","y","className","name","group","src","thumbURL","alt","height","width","startAngle","endAngle","data","labelRadius","radius","containerComponent","responsive","sensorID","MachinesList","useSelector","state","dispatch","useDispatch","useEffect","console","log","map","key","id","Boolean","window","location","hostname","match","initialState","reducer","action","rootReducer","combineReducers","machinesReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb488886.chunk.js","sourcesContent":["const isRequestSuccessful = (response: Response) => response.status >= 200 && response.status < 204;\r\n\r\nclass HTTPError extends Error {\r\n  public readonly httpStatus?: number;\r\n  constructor(message: string, httpStatus?: number) {\r\n    super(message);\r\n    this.httpStatus = httpStatus;\r\n    Object.setPrototypeOf(this, new.target.prototype);\r\n  }\r\n}\r\n\r\nlet prefix: string;\r\n/**\r\n *\r\n */\r\nif (process.env.NODE_ENV === 'production') {\r\n  /**\r\n   * Bypass CORS in build by using this convenient service\r\n   */\r\n  prefix = 'https://cors-anywhere.herokuapp.com/dummy-hacxuuktha-ew.a.run.app/'\r\n} else {\r\n  /**\r\n   * Bypas CORS locally by proxy-ing\r\n   */\r\n  prefix = 'api/'\r\n}\r\n\r\nexport class Http {\r\n  public static fetch = async (url: string, options?: RequestInit | undefined) => {\r\n\r\n    /**\r\n     * Using Express proxy over https://dummy-hacxuuktha-ew.a.run.app because it doesn't have CORS enabled\r\n     */\r\n    const result = await fetch(prefix + url, options);\r\n\r\n    if (!isRequestSuccessful(result)) {\r\n      throw new HTTPError('Http error occurred', result.status);\r\n    }\r\n\r\n    return result.json();\r\n  }\r\n}","import { Http } from \"./Http\"\r\n\r\nexport type MachineActivity = {\r\n  activeHours: number;\r\n  idleHours: number;\r\n}\r\n\r\nexport type Machine = {\r\n  activity: MachineActivity,\r\n  group: string;\r\n  id: string;\r\n  imageURL: string;\r\n  name: string;\r\n  sensorID: string;\r\n  thumbURL: string;\r\n  type: string;\r\n}\r\n\r\nexport class MachineService {\r\n  public static getAll = async () => {\r\n    const res = await Http.fetch('/machines');\r\n\r\n    return res.machines;\r\n  }\r\n}","import { ActionCreator, AnyAction } from \"redux\";\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { MachinesActionTypes, GET_MACHINES_REQUEST, GET_MACHINES_SUCCESS, GET_MACHINES_FAIL } from \"./machinesTypes\";\r\nimport { MachineService, Machine } from \"../../services/MachineService\";\r\n\r\nconst getMachinesRequest: ActionCreator<MachinesActionTypes> = () => ({\r\n  type: GET_MACHINES_REQUEST\r\n})\r\n\r\nconst getMachinesSuccess: ActionCreator<MachinesActionTypes> = (machines: Machine[]) => ({\r\n  type: GET_MACHINES_SUCCESS,\r\n  payload: { machines }\r\n})\r\n\r\nconst getMachinesFail: ActionCreator<MachinesActionTypes> = () => ({\r\n  type: GET_MACHINES_FAIL\r\n})\r\n\r\nexport const getMachines = (): ThunkAction<Promise<void>, {}, {}, AnyAction> => {\r\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n    dispatch(getMachinesRequest());\r\n    try {\r\n      const machines = await MachineService.getAll();\r\n\r\n      dispatch(getMachinesSuccess(machines));\r\n    } catch {\r\n      dispatch(getMachinesFail());\r\n    }\r\n\r\n    return;\r\n  };\r\n};","import { Action } from \"redux\";\r\nimport { Machine } from \"../../services/MachineService\";\r\n\r\nexport const GET_MACHINES_REQUEST = 'GET_MACHINES_REQUEST';\r\nexport const GET_MACHINES_SUCCESS = 'GET_MACHINES_SUCCESS';\r\nexport const GET_MACHINES_FAIL = 'GET_MACHINES_FAIL';\r\n\r\nexport interface IMachinesState {\r\n  machines: Machine[];\r\n}\r\n\r\ninterface IGetMachinesRequestAction extends Action {\r\n  type: typeof GET_MACHINES_REQUEST;\r\n}\r\n\r\ninterface IGetMachinesSuccessAction extends Action {\r\n  type: typeof GET_MACHINES_SUCCESS;\r\n  payload: {\r\n    machines: Machine[];\r\n  }\r\n}\r\ninterface IGetMachinesFailAction extends Action {\r\n  type: typeof GET_MACHINES_FAIL;\r\n}\r\n\r\nexport type MachinesActionTypes =\r\n  IGetMachinesRequestAction\r\n  | IGetMachinesSuccessAction\r\n  | IGetMachinesFailAction;","import React from 'react';\r\n\r\nimport './MachineTile.scss';\r\nimport { Machine } from '../services/MachineService';\r\nimport { VictoryPie, VictoryContainer } from 'victory';\r\n\r\nexport interface IMachineTileProps {\r\n  machine: Machine;\r\n}\r\n\r\nexport const MachineTile: React.FC<IMachineTileProps> = ({machine}) => {\r\n\r\n  const onTime = machine.activity.activeHours;\r\n  const idleTime = machine.activity.idleHours;\r\n  const engineTime = onTime + idleTime;\r\n  const offTime = 24 - engineTime;\r\n\r\n  const chartData = [];\r\n  const colorScale = [];\r\n\r\n  if (onTime > 0) {\r\n    chartData.push({\r\n      x: 'On: ' + onTime.toFixed(1),\r\n      y: onTime\r\n    });\r\n    colorScale.push('green');\r\n  }\r\n\r\n  if (idleTime > 0) {\r\n    chartData.push({\r\n      x: 'Idle ' + idleTime.toFixed(1),\r\n      y: idleTime\r\n    });\r\n    colorScale.push('yellow')\r\n  }\r\n\r\n  if (offTime > 0) {\r\n    chartData.push({\r\n      x: 'Off ' + offTime.toFixed(1),\r\n      y: offTime\r\n    });\r\n    colorScale.push('grey');\r\n  }\r\n\r\n  return (\r\n    <div className=\"machine-tile\">\r\n      <div className=\"machine-tile__body\">\r\n        <div className=\"machine-tile__name\">\r\n          <div><b>{machine.type + ' ' + machine.name}</b></div>\r\n          <div>{machine.group}</div>\r\n        </div>\r\n        <div className=\"machine-tile__info\">\r\n          <img src={machine.thumbURL} alt=\"\" />\r\n          <div className=\"machine-tile__status-chart\">\r\n            <VictoryPie\r\n              colorScale={colorScale}\r\n              height={170}\r\n              width={220}\r\n              startAngle={-90}\r\n              endAngle={90}\r\n              data={chartData}\r\n              labelRadius={70}\r\n              radius={50}\r\n              containerComponent={<VictoryContainer responsive={true}/>}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"machine-tile__name\">\r\n          <div>sensor: {machine.sensorID}</div>\r\n          <div><b>total: {engineTime.toFixed(1)} hrs</b></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './MachinesList.scss';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getMachines } from '../store/machines/machinesActions';\r\nimport { Machine } from '../services/MachineService';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AnyAction } from 'redux';\r\n// import { IMachinesState } from '../store/machines/machinesTypes';\r\nimport { MachineTile } from '../components/MachineTile';\r\nimport { IApplicationState } from '../store/rootReducer';\r\n\r\nexport const MachinesList: React.FC = () => {\r\n  const machines: Machine[] = useSelector((state: IApplicationState) => state.machines.machines);\r\n  const dispatch = useDispatch<ThunkDispatch<{}, {}, AnyAction>>();\r\n  useEffect(() => {\r\n    dispatch(getMachines());\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\nconsole.log(machines);\r\n  return (\r\n    <div className=\"machines-list\">\r\n      <div className=\"content-area\">\r\n\r\n        {machines.map(machine => <div key={machine.id} className=\"col-lg-4 col-md-6\">\r\n          <MachineTile machine={machine} />\r\n        </div>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Reducer } from 'redux';\r\nimport { IMachinesState, MachinesActionTypes, GET_MACHINES_REQUEST, GET_MACHINES_FAIL, GET_MACHINES_SUCCESS } from './machinesTypes';\r\n\r\nexport const initialState: IMachinesState = {\r\n  machines: []\r\n};\r\n\r\nconst reducer: Reducer<IMachinesState, MachinesActionTypes> = (\r\n  state: IMachinesState = initialState,\r\n  action: MachinesActionTypes\r\n) => {\r\n  switch (action.type) {\r\n    case GET_MACHINES_REQUEST:\r\n    case GET_MACHINES_FAIL:\r\n      return state;\r\n    case GET_MACHINES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        machines: action.payload.machines\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers, AnyAction, Reducer } from \"redux\";\r\nimport machinesReducer from './machines/machinesReducer';\r\nimport { IMachinesState } from \"./machines/machinesTypes\";\r\n\r\nexport interface IApplicationState {\r\n  machines: IMachinesState;\r\n}\r\n\r\nconst rootReducer: Reducer<IApplicationState, AnyAction> = combineReducers<IApplicationState>({\r\n  machines: machinesReducer,\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './rootReducer';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { store } from './store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.scss';\nimport { MachinesList } from './pages/MachinesList';\n\nexport const App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <MachinesList />\n    </div>\n  );\n}\n"],"sourceRoot":""}