{"version":3,"sources":["app-colors.scss","index.scss","pages/MachinesList.scss","components/MachineTile.scss","pages/MachineDetails.scss","services/Http.ts","store/machines/machinesTypes.ts","services/MachineService.ts","utils/delay.ts","store/machines/machinesActions.ts","components/MachineTile.tsx","components/ServerStatus.tsx","pages/MachinesList.tsx","components/MachineHistoryChart.tsx","pages/MachineDetails.tsx","serviceWorker.ts","store/machines/machinesReducer.ts","store/rootReducer.ts","store/rootSaga.ts","store/index.ts","index.tsx","App.tsx"],"names":["module","exports","prefix","POLL_MACHINES_START","POLL_MACHINES_STOP","POLL_MACHINE_BY_ID_START","POLL_MACHINE_BY_ID_STOP","HTTPError","message","httpStatus","Object","setPrototypeOf","prototype","Error","Http","fetch","url","options","a","async","result","response","status","json","MachineStates","MachinesEndpointStatus","MachineService","getAll","machines","getById","id","getHistory","history","delay","duration","Promise","resolve","setTimeout","pollMachinesSaga","watchPollMachinesSaga","pollMachineByIdSaga","watchPollMachineByIdSaga","getMachinesRequest","type","getMachinesSuccess","payload","getMachinesFail","put","call","take","race","getMachineByIdRequest","getMachineByIdSuccess","machine","getMachineByIdFail","action","getMachineHistorySuccess","machineHistory","appColors","require","MachineTile","onTime","activity","activeHours","idleTime","idleHours","engineTime","offTime","chartData","colorScale","push","x","toFixed","y","operationOn","operationIdle","operationOff","className","href","name","group","src","thumbURL","alt","height","width","startAngle","endAngle","data","labelRadius","radius","containerComponent","responsive","sensorID","ServerStatus","MachinesList","useSelector","state","sort","m1","m2","machinesLoadedLast","machinesEndpointStatus","dispatch","useDispatch","useState","nameFilter","setNameFilter","timeSort","setTimeSort","groupFilter","setGroupFilter","useEffect","filteredMachines","filter","toLocaleLowerCase","indexOf","namefilterFn","timeSortFn","availableSites","forEach","moment","format","htmlFor","value","onChange","e","currentTarget","map","site","key","onClick","preventDefault","MachineHistoryChart","historyData","item","Date","start","getTime","fill","Active","Idle","Off","label","end","length","theme","VictoryTheme","material","domainPadding","tickValues","datum","tickFormat","style","labels","marginLeft","barWidth","alignment","MachineDetails","withRouter","props","ID","match","params","machineID","machineInfo","machineById","machineHistoryById","endpointStatus","machineByIdEndpointStatus","getMachineHistory","loadedLast","imageURL","Boolean","window","location","hostname","initialState","reducer","Problem","machineFromList","find","rootReducer","combineReducers","machinesReducer","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","applyMiddleware","save","thunk","createStore","createStoreWithMiddleware","load","run","ReactDOM","render","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98ed014e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"operationOn\":\"#00b159\",\"operationIdle\":\"#e5e500\",\"operationOff\":\"#666\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"operationOn\":\"#00b159\",\"operationIdle\":\"#e5e500\",\"operationOff\":\"#666\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"operationOn\":\"#00b159\",\"operationIdle\":\"#e5e500\",\"operationOff\":\"#666\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"operationOn\":\"#00b159\",\"operationIdle\":\"#e5e500\",\"operationOff\":\"#666\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"operationOn\":\"#00b159\",\"operationIdle\":\"#e5e500\",\"operationOff\":\"#666\"};","const isRequestSuccessful = (response: Response) => response.status >= 200 && response.status < 204;\r\n\r\nclass HTTPError extends Error {\r\n  public readonly httpStatus?: number;\r\n  constructor(message: string, httpStatus?: number) {\r\n    super(message);\r\n    this.httpStatus = httpStatus;\r\n    Object.setPrototypeOf(this, new.target.prototype);\r\n  }\r\n}\r\n\r\nlet prefix: string;\r\n/**\r\n * The specified endpoint doesn't allow other origins, so...\r\n */\r\nif (process.env.NODE_ENV === 'production') {\r\n  /**\r\n   * Bypass CORS in build by using this convenient service\r\n   */\r\n  prefix = 'https://cors-anywhere.herokuapp.com/dummy-hacxuuktha-ew.a.run.app'\r\n} else {\r\n  /**\r\n   * Bypas CORS locally by proxy-ing\r\n   */\r\n  prefix = 'api'\r\n}\r\n\r\nexport class Http {\r\n  public static fetch = async (url: string, options?: RequestInit | undefined) => {\r\n\r\n    /**\r\n     * Using Express proxy over https://dummy-hacxuuktha-ew.a.run.app because it doesn't have CORS enabled\r\n     */\r\n    const result = await fetch(prefix + url, options);\r\n\r\n    if (!isRequestSuccessful(result)) {\r\n      throw new HTTPError('Http error occurred', result.status);\r\n    }\r\n\r\n    return result.json();\r\n  }\r\n}","import { Action } from \"redux\";\r\nimport { Machine, MachinesEndpointStatus, MachineHistory } from \"../../services/MachineService\";\r\n\r\nexport const GET_MACHINES_REQUEST = 'GET_MACHINES_REQUEST';\r\nexport const GET_MACHINES_SUCCESS = 'GET_MACHINES_SUCCESS';\r\nexport const GET_MACHINES_FAIL = 'GET_MACHINES_FAIL';\r\nexport const POLL_MACHINES_START = 'POLL_MACHINES_START';\r\nexport const POLL_MACHINES_STOP = 'POLL_MACHINES_STOP';\r\nexport const GET_MACHINE_BY_ID_REQUEST = 'GET_MACHINE_BY_ID_REQUEST';\r\nexport const GET_MACHINE_BY_ID_SUCCESS = 'GET_MACHINE_BY_ID_SUCCESS';\r\nexport const GET_MACHINE_BY_ID_FAIL = 'GET_MACHINE_BY_ID_FAIL';\r\nexport const GET_MACHINE_HISTORY_REQUEST = 'GET_MACHINE_HISTORY_REQUEST';\r\nexport const GET_MACHINE_HISTORY_SUCCESS = 'GET_MACHINE_HISTORY_SUCCESS';\r\nexport const GET_MACHINE_HISTORY_FAIL = 'GET_MACHINE_HISTORY_FAIL';\r\nexport const POLL_MACHINE_BY_ID_START = 'POLL_MACHINE_BY_ID_START';\r\nexport const POLL_MACHINE_BY_ID_STOP = 'POLL_MACHINE_BY_ID_STOP';\r\n\r\nexport interface IMachinesState {\r\n  machines: Machine[];\r\n  machinesLoadedLast?: Date;\r\n  machinesEndpointStatus: MachinesEndpointStatus;\r\n  machineById: {\r\n    [id: string]: {\r\n      machine: Machine;\r\n      loadedLast: Date;\r\n    }\r\n  };\r\n  machineByIdEndpointStatus: MachinesEndpointStatus;\r\n  machineHistoryById: {\r\n    [id: string]: MachineHistory[];\r\n  }\r\n}\r\n\r\ninterface IPollMachinesStart extends Action {\r\n  type: typeof POLL_MACHINES_START;\r\n}\r\n\r\ninterface IPollMachinesStop extends Action {\r\n  type: typeof POLL_MACHINES_STOP;\r\n}\r\n\r\ninterface IGetMachinesRequestAction extends Action {\r\n  type: typeof GET_MACHINES_REQUEST;\r\n}\r\n\r\ninterface IGetMachinesSuccessAction extends Action {\r\n  type: typeof GET_MACHINES_SUCCESS;\r\n  payload: {\r\n    machines: Machine[];\r\n  }\r\n}\r\ninterface IGetMachinesFailAction extends Action {\r\n  type: typeof GET_MACHINES_FAIL;\r\n}\r\n\r\nexport interface IPollMachineByIdStart extends Action {\r\n  type: typeof POLL_MACHINE_BY_ID_START;\r\n  payload: {\r\n    id: string;\r\n  }\r\n}\r\n\r\ninterface IPollMachineByIdStop extends Action {\r\n  type: typeof POLL_MACHINE_BY_ID_STOP;\r\n}\r\n\r\ninterface IGetMachineByIdRequestAction extends Action {\r\n  type: typeof GET_MACHINE_BY_ID_REQUEST;\r\n  payload: {\r\n    id: string;\r\n  }\r\n}\r\n\r\ninterface IGetMachineByIdSuccessAction extends Action {\r\n  type: typeof GET_MACHINE_BY_ID_SUCCESS;\r\n  payload: {\r\n    machine: Machine;\r\n  }\r\n}\r\n\r\ninterface IGetMachineByIdFailAction extends Action {\r\n  type: typeof GET_MACHINE_BY_ID_FAIL;\r\n}\r\n\r\ninterface IGetMachineHistoryRequestAction extends Action {\r\n  type: typeof GET_MACHINE_HISTORY_REQUEST;\r\n}\r\n\r\ninterface IGetMachineHistorySuccessAction extends Action {\r\n  type: typeof GET_MACHINE_HISTORY_SUCCESS;\r\n  payload: {\r\n    id: string;\r\n    machineHistory: MachineHistory[];\r\n  }\r\n}\r\ninterface IGetMachineHistoryFailAction extends Action {\r\n  type: typeof GET_MACHINE_HISTORY_FAIL;\r\n}\r\n\r\nexport type MachinesActionTypes =\r\n  IPollMachinesStart\r\n  | IPollMachinesStop\r\n  | IGetMachinesRequestAction\r\n  | IGetMachinesSuccessAction\r\n  | IGetMachinesFailAction\r\n  | IPollMachineByIdStart\r\n  | IPollMachineByIdStop\r\n  | IGetMachineByIdRequestAction\r\n  | IGetMachineByIdSuccessAction\r\n  | IGetMachineByIdFailAction\r\n  | IGetMachineHistoryRequestAction\r\n  | IGetMachineHistorySuccessAction\r\n  | IGetMachineHistoryFailAction;","import { Http } from \"./Http\"\r\n\r\nexport const ACTIVE_HOURS = 'activeHours';\r\nexport const IDLE_HOURS = 'idleHours';\r\n\r\nexport type MachineActivityKeys = typeof ACTIVE_HOURS | typeof IDLE_HOURS;\r\n\r\nexport type MachineActivity = {\r\n  [k in MachineActivityKeys]: number;\r\n}\r\n\r\nexport type Machine = {\r\n  activity: MachineActivity,\r\n  group: string;\r\n  id: string;\r\n  imageURL: string;\r\n  name: string;\r\n  sensorID: string;\r\n  thumbURL: string;\r\n  type: string;\r\n}\r\n\r\nexport enum MachineStates {\r\n  Active = 'ACTIVE',\r\n  Idle = 'IDLE',\r\n  Off = 'OFF'\r\n}\r\n\r\nexport type MachineHistory = {\r\n  start: string;\r\n  end: string;\r\n  state: MachineStates;\r\n}\r\n\r\nexport enum MachinesEndpointStatus {\r\n  Active = 'active',\r\n  Problem = 'problem',\r\n}\r\n\r\nexport class MachineService {\r\n  public static getAll = async (): Promise<Machine[]> => (await Http.fetch('/machines')).machines;\r\n\r\n  public static getById = async (id: string): Promise<Machine> => await Http.fetch('/machines/' + id);\r\n\r\n  public static getHistory = async (id: string): Promise<MachineHistory[]> => (await Http.fetch('/machines/' + id + '/history')).history;\r\n}","/**\r\n * Replacement for redux-saga's delay, which I can't seem to be able use as intended in order to set polling frequency\r\n * @param duration milliseconds to wait\r\n */\r\nexport const delay = (duration: number) => {\r\n  const promise = new Promise(resolve => {\r\n      setTimeout(() => resolve(true), duration)\r\n  });\r\n  return promise;\r\n}","import { ActionCreator, AnyAction } from \"redux\";\r\nimport { call, put, take, race } from 'redux-saga/effects';\r\n\r\nimport {\r\n  MachinesActionTypes,\r\n  GET_MACHINES_REQUEST,\r\n  GET_MACHINES_SUCCESS,\r\n  GET_MACHINES_FAIL,\r\n  POLL_MACHINES_START,\r\n  POLL_MACHINES_STOP,\r\n  GET_MACHINE_BY_ID_REQUEST,\r\n  GET_MACHINE_BY_ID_SUCCESS,\r\n  GET_MACHINE_BY_ID_FAIL,\r\n  POLL_MACHINE_BY_ID_START,\r\n  POLL_MACHINE_BY_ID_STOP,\r\n  IPollMachineByIdStart,\r\n  GET_MACHINE_HISTORY_REQUEST,\r\n  GET_MACHINE_HISTORY_SUCCESS,\r\n  GET_MACHINE_HISTORY_FAIL,\r\n} from './machinesTypes';\r\nimport { MachineService, Machine, MachineHistory } from '../../services/MachineService';\r\nimport { delay } from '../../utils/delay';\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\n\r\nconst getMachinesRequest: ActionCreator<MachinesActionTypes> = () => ({\r\n  type: GET_MACHINES_REQUEST\r\n})\r\n\r\nconst getMachinesSuccess: ActionCreator<MachinesActionTypes> = (machines: Machine[]) => ({\r\n  type: GET_MACHINES_SUCCESS,\r\n  payload: { machines }\r\n})\r\n\r\nconst getMachinesFail: ActionCreator<MachinesActionTypes> = () => ({\r\n  type: GET_MACHINES_FAIL\r\n})\r\n\r\nexport const getMachines: ActionCreator<MachinesActionTypes> = () => ({\r\n  type: POLL_MACHINES_START\r\n})\r\n\r\nexport const stopPollingMachines: ActionCreator<MachinesActionTypes> = () => ({\r\n  type: POLL_MACHINES_STOP\r\n})\r\n\r\nfunction* pollMachinesSaga() {\r\n  while (true) {\r\n    try {\r\n      yield put(getMachinesRequest());\r\n      const machines: Machine[] = yield call(() => MachineService.getAll());\r\n      yield put(getMachinesSuccess(machines));\r\n      yield call(delay, 30000);\r\n    } catch (err) {\r\n      yield put(getMachinesFail(err));\r\n    }\r\n  }\r\n}\r\n\r\nexport function* watchPollMachinesSaga() {\r\n  while (true) {\r\n    yield take(POLL_MACHINES_START);\r\n    yield race([\r\n      call(pollMachinesSaga),\r\n      take(POLL_MACHINES_STOP)\r\n    ]);\r\n  }\r\n}\r\n\r\nconst getMachineByIdRequest: ActionCreator<MachinesActionTypes> = (id: string) => ({\r\n  type: GET_MACHINE_BY_ID_REQUEST,\r\n  payload: { id }\r\n})\r\n\r\nconst getMachineByIdSuccess: ActionCreator<MachinesActionTypes> = (machine: Machine) => ({\r\n  type: GET_MACHINE_BY_ID_SUCCESS,\r\n  payload: { machine }\r\n})\r\n\r\nconst getMachineByIdFail: ActionCreator<MachinesActionTypes> = () => ({\r\n  type: GET_MACHINE_BY_ID_FAIL\r\n})\r\n\r\nexport const getMachineById: ActionCreator<MachinesActionTypes> = (id: string) => ({\r\n  type: POLL_MACHINE_BY_ID_START,\r\n  payload: { id }\r\n})\r\n\r\nexport const stopPollingMachineById: ActionCreator<MachinesActionTypes> = () => ({\r\n  type: POLL_MACHINE_BY_ID_STOP\r\n})\r\n\r\nfunction* pollMachineByIdSaga(action: IPollMachineByIdStart) {\r\n  while (true) {\r\n    try {\r\n      yield put(getMachineByIdRequest(action.payload.id));\r\n      const machine: Machine = yield call(() => MachineService.getById(action.payload.id));\r\n      yield put(getMachineByIdSuccess(machine));\r\n      yield call(delay, 30000);\r\n    } catch (err) {\r\n      yield put(getMachineByIdFail(err));\r\n    }\r\n  }\r\n}\r\n\r\nexport function* watchPollMachineByIdSaga() {\r\n  while (true) {\r\n    const action = yield take(POLL_MACHINE_BY_ID_START);\r\n    yield race([\r\n      call(pollMachineByIdSaga, action),\r\n      take(POLL_MACHINE_BY_ID_STOP)\r\n    ]);\r\n  }\r\n}\r\n\r\nconst getMachineHistoryRequest: ActionCreator<MachinesActionTypes> = () => ({\r\n  type: GET_MACHINE_HISTORY_REQUEST\r\n})\r\n\r\nconst getMachineHistorySuccess: ActionCreator<MachinesActionTypes> = (machineHistory: MachineHistory[], id: string) => ({\r\n  type: GET_MACHINE_HISTORY_SUCCESS,\r\n  payload: { machineHistory, id }\r\n})\r\n\r\nconst getMachineHistoryFail: ActionCreator<MachinesActionTypes> = () => ({\r\n  type: GET_MACHINE_HISTORY_FAIL\r\n})\r\n\r\nexport const getMachineHistory = (id: string): ThunkAction<Promise<void>, {}, {}, AnyAction> => {\r\n  return async (dispatch: ThunkDispatch<{}, {}, AnyAction>) => {\r\n    dispatch(getMachineHistoryRequest());\r\n    try {\r\n      const machineHistory = await MachineService.getHistory(id);\r\n\r\n      dispatch(getMachineHistorySuccess(machineHistory, id));\r\n    } catch (err) {\r\n      dispatch(getMachineHistoryFail(err));\r\n      await delay(1000);\r\n      getMachineHistory(id);\r\n    }\r\n\r\n    return;\r\n  };\r\n};\r\n\r\n// export function* getMachineHistory(id: string) {\r\n//   console.log('sadasdsadsa');\r\n//   try {\r\n//     yield put(getMachineHistoryRequest());\r\n//     const machineHistory: MachineHistory[] = yield call(() => MachineService.getHistory(id));\r\n//     yield put(getMachineHistorySuccess(machineHistory, id));\r\n//   } catch (err) {\r\n//     yield put(getMachineHistoryFail(err));\r\n//   }\r\n// }","import React from 'react';\r\n\r\nimport './MachineTile.scss';\r\nimport { Machine } from '../services/MachineService';\r\nimport { VictoryPie, VictoryContainer } from 'victory';\r\n\r\nconst appColors = require('../app-colors.scss');\r\n\r\nexport interface IMachineTileProps {\r\n  machine: Machine;\r\n}\r\n\r\nexport const MachineTile: React.FC<IMachineTileProps> = ({machine}) => {\r\n\r\n  const onTime = machine.activity.activeHours;\r\n  const idleTime = machine.activity.idleHours;\r\n  const engineTime = onTime + idleTime;\r\n  const offTime = 24 - engineTime;\r\n\r\n  const chartData = [];\r\n  const colorScale = [];\r\n\r\n  if (onTime > 0) {\r\n    chartData.push({\r\n      x: 'On: ' + onTime.toFixed(1),\r\n      y: onTime\r\n    });\r\n    colorScale.push(appColors.operationOn);\r\n  }\r\n\r\n  if (idleTime > 0) {\r\n    chartData.push({\r\n      x: 'Idle ' + idleTime.toFixed(1),\r\n      y: idleTime\r\n    });\r\n    colorScale.push(appColors.operationIdle)\r\n  }\r\n\r\n  if (offTime > 0) {\r\n    chartData.push({\r\n      x: 'Off ' + offTime.toFixed(1),\r\n      y: offTime\r\n    });\r\n    colorScale.push(appColors.operationOff);\r\n  }\r\n\r\n  return (\r\n    <div className=\"machine-tile\">\r\n      <div className=\"machine-tile__name\">\r\n        <div>\r\n          <a href={`/${machine.id}`}>\r\n            <b>{machine.type + ' ' + machine.name}</b>\r\n          </a>\r\n        </div>\r\n        <div>{machine.group}</div>\r\n      </div>\r\n      <div className=\"machine-tile__info\">\r\n        <a className=\"machine-tile__thumbnail-link\" href={`/${machine.id}`}>\r\n          <img src={machine.thumbURL} alt=\"\" />\r\n        </a>\r\n        <div className=\"machine-tile__status-chart\">\r\n          <VictoryPie\r\n            colorScale={colorScale}\r\n            height={170}\r\n            width={220}\r\n            startAngle={-90}\r\n            endAngle={90}\r\n            data={chartData}\r\n            labelRadius={70}\r\n            radius={50}\r\n            containerComponent={<VictoryContainer responsive={true}/>}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"machine-tile__name\">\r\n        <div>sensor: {machine.sensorID}</div>\r\n        <div><b>total: {engineTime.toFixed(1)} hrs</b></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './ServerStatus.scss';\r\nimport { MachinesEndpointStatus } from '../services/MachineService';\r\n\r\nexport interface IServerStatusProps {\r\n  status: MachinesEndpointStatus;\r\n}\r\n\r\nexport const ServerStatus: React.FC<IServerStatusProps> = ({status}) => {\r\n  return (\r\n    <div className={`server-status server-status--${status}`}/>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport './MachinesList.scss';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getMachines, stopPollingMachines } from '../store/machines/machinesActions';\r\nimport { Machine, MachinesEndpointStatus, MachineActivityKeys, ACTIVE_HOURS, IDLE_HOURS } from '../services/MachineService';\r\nimport moment from 'moment';\r\n// import { IMachinesState } from '../store/machines/machinesTypes';\r\nimport { MachineTile } from '../components/MachineTile';\r\nimport { IApplicationState } from '../store/rootReducer';\r\nimport { ServerStatus } from '../components/ServerStatus';\r\n\r\nexport const namefilterFn = (nameFilter: string) => (machine: Machine) => machine.name.toLocaleLowerCase().indexOf(nameFilter.toLocaleLowerCase()) > -1\r\nexport const timeSortFn = (timeSort: MachineActivityKeys | '') => (m1: Machine, m2: Machine) =>\r\n  timeSort\r\n    ? m2.activity[timeSort] - m1.activity[timeSort]\r\n    : 1;\r\n\r\nexport const MachinesList: React.FC = () => {\r\n  const machines: Machine[] = useSelector((state: IApplicationState) => state.machines.machines).sort((m1, m2) => {\r\n    if (m1.name > m2.name) return 1;\r\n    if (m1.name < m2.name) return -1;\r\n    return 0;\r\n  });\r\n  const machinesLoadedLast: Date | undefined = useSelector((state: IApplicationState) => state.machines.machinesLoadedLast);\r\n  const machinesEndpointStatus: MachinesEndpointStatus = useSelector((state: IApplicationState) => state.machines.machinesEndpointStatus);\r\n  const dispatch = useDispatch();\r\n\r\n  const [nameFilter, setNameFilter] = useState('');\r\n  const [timeSort, setTimeSort] = useState<MachineActivityKeys | ''>('');\r\n  const [groupFilter, setGroupFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    dispatch(getMachines());\r\n    return () => {\r\n      dispatch(stopPollingMachines())\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n\r\n  let filteredMachines = machines.filter(namefilterFn(nameFilter)).sort(timeSortFn(timeSort));\r\n  const availableSites: string[] = [];\r\n  filteredMachines.forEach(machine => {\r\n    if (availableSites.indexOf(machine.group) <= -1) {\r\n      availableSites.push(machine.group);\r\n    }\r\n  });\r\n\r\n  filteredMachines = filteredMachines.filter(machine => groupFilter ? machine.group === groupFilter : true);\r\n\r\n  const renderFilters = () => (<div className=\"col-lg-12 inner-grid-12 column-gap machines-list__filters\">\r\n    <div className=\"col-lg-4\">\r\n      <label htmlFor=\"#name-fiter\">Search by name:</label>\r\n      <input id=\"name-filter\" value={nameFilter} onChange={(e) => setNameFilter(e.currentTarget.value)} />\r\n    </div>\r\n    <div className=\"col-lg-4\">\r\n      <label htmlFor=\"#time-sort\">Sort by active/idle time:</label>\r\n      <select id=\"time-sort\" value={timeSort} onChange={(e) => setTimeSort(e.currentTarget.value as MachineActivityKeys | '')}>\r\n        {/** Maybe some nice iteration over enum */}\r\n        <option value=\"\"/>\r\n        <option value={ACTIVE_HOURS}>Active time</option>\r\n        <option value={IDLE_HOURS}>Idle time</option>\r\n      </select>\r\n    </div>\r\n    <div className=\"col-lg-4\">\r\n      <label htmlFor=\"#site-filter\">Filter by site:</label>\r\n      <select id=\"site-filter\" value={groupFilter} onChange={(e) => setGroupFilter(e.currentTarget.value)}>\r\n        <option value=\"\"/>\r\n        {availableSites.map(site => <option key={site} value={site}>{site}</option>)}\r\n      </select>\r\n    </div>\r\n    <div className=\"col-lg-12\">\r\n      <a className=\"machines-list__reset-filters\" href=\"/#\" onClick={e => {\r\n        e.preventDefault();\r\n        setNameFilter('');\r\n        setTimeSort('');\r\n        setGroupFilter('');\r\n      }}>\r\n        Reset filters\r\n      </a>\r\n    </div>\r\n  </div>)\r\n\r\n  return (\r\n    <div className=\"machines-list\">\r\n      <div className=\"content-area bottom-spacing\">\r\n        <h2 className=\"col-lg-12\">Status for all your machines</h2>\r\n        <div className=\"col-lg-12 inner-grid-12 column-gap bottom-spacing machines-list__status\">\r\n          {machinesLoadedLast\r\n          ? <div className=\"col-lg-8\">Accurate as of {moment(machinesLoadedLast).format('DD/MMM HH:mm:ss')}</div>\r\n          : null}\r\n          <div className=\"col-lg-3 col-sm-8\">\r\n            Server status:\r\n          </div>\r\n          <div className=\"col-lg-1 col-sm-4\">\r\n            <ServerStatus status={machinesEndpointStatus} />\r\n          </div>\r\n        </div>\r\n        {renderFilters()}\r\n      </div>\r\n      <div className=\"content-area column-gap row-gap bottom-spacing\">\r\n        {filteredMachines.map(machine => <div key={machine.id} className=\"col-lg-4 col-md-6\">\r\n          <MachineTile machine={machine} />\r\n        </div>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import moment from 'moment';\r\nimport React from 'react';\r\nimport { VictoryAxis, VictoryBar, VictoryChart, VictoryTheme } from 'victory';\r\nimport { MachineHistory, MachineStates } from '../services/MachineService';\r\n\r\nconst appColors = require('../app-colors.scss');\r\n\r\nexport interface IMachineHistoryChartProps {\r\n  machineHistory: MachineHistory[];\r\n}\r\n\r\nexport const MachineHistoryChart: React.FC<IMachineHistoryChartProps> = ({machineHistory}) => {\r\n  if (!machineHistory) {\r\n    return null;\r\n  }\r\n\r\n  const historyData = machineHistory.map(item => {\r\n\r\n    const x = new Date(item.start).getTime();\r\n\r\n    let y = 0;\r\n    let fill = '';\r\n    switch (item.state) {\r\n      case MachineStates.Active:\r\n        y = 2;\r\n        fill = appColors.operationOn;\r\n        break;\r\n      case MachineStates.Idle:\r\n        y = -1;\r\n        fill = appColors.operationIdle;\r\n        break;\r\n      case MachineStates.Off:\r\n        y = -0.5;\r\n        fill = appColors.operationOff;\r\n    }\r\n\r\n    return {\r\n      x,\r\n      y,\r\n      fill,\r\n      label: moment(x).format('HH:mm'),\r\n      width: new Date(item.end).getTime() - x\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"inner-grid-12\">\r\n      <div className=\"col-lg-12\">\r\n        <h3>History</h3>\r\n        <p>On, Idle and Off status for {moment(machineHistory[0].start).format('ddd DD MMM')} - {moment(machineHistory[machineHistory.length - 1].end).format('ddd DD MMM')}</p>\r\n      </div>\r\n      <div className=\"col-lg-12\">\r\n        <VictoryChart\r\n          theme={VictoryTheme.material}\r\n          domainPadding={10}\r\n          height={300}\r\n          width={1000}\r\n        >\r\n          <VictoryAxis\r\n            tickValues={historyData.map(datum => datum.x)}\r\n            tickFormat={() => ''}\r\n          />\r\n          <VictoryBar\r\n            data={historyData}\r\n            style={{\r\n              data: {\r\n                fill: ({datum}) => datum.fill\r\n              },\r\n              labels: {\r\n                marginLeft: '200px'\r\n              }\r\n            }}\r\n            barWidth={({datum}) => 0.0000105 * datum.width}\r\n            alignment=\"start\"\r\n            labels={({datum}) => datum.label}\r\n          />\r\n        </VictoryChart>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import moment from 'moment';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\n\r\nimport { getMachineById, getMachineHistory, stopPollingMachineById } from '../store/machines/machinesActions';\r\nimport { IApplicationState } from '../store/rootReducer';\r\nimport './MachineDetails.scss';\r\nimport { MachineHistoryChart } from '../components/MachineHistoryChart';\r\nimport { ServerStatus } from '../components/ServerStatus';\r\n\r\n\r\ninterface IMachineDetailsParams {\r\n  machineID: string;\r\n}\r\n\r\nexport type IMachineDetailsProps = RouteComponentProps<IMachineDetailsParams>;\r\n\r\nexport const MachineDetails = withRouter((props) => {\r\n  const ID = props.match.params.machineID;\r\n  const machineInfo = useSelector((state: IApplicationState) => state.machines.machineById[ID]);\r\n  const machineHistory = useSelector((state: IApplicationState) => state.machines.machineHistoryById[ID]);\r\n  const endpointStatus = useSelector((state: IApplicationState) => state.machines.machineByIdEndpointStatus);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getMachineById(ID));\r\n    dispatch(getMachineHistory(ID));\r\n    return () => {\r\n      dispatch(stopPollingMachineById());\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  if (!machineInfo) {\r\n    return <div>Loading...</div>\r\n  } else {\r\n    const { machine, loadedLast } = machineInfo;\r\n    return (\r\n      <div className=\"machine-details\">\r\n        <div className=\"content-area machine-details__content\">\r\n          <div className=\"col-lg-10 col-md-8 col-sm-6 top-spacing bottom-spacing\">\r\n            <a href=\"/\">{'<'} Home</a>\r\n          </div>\r\n          <div className=\"col-lg-2 col-md-4 col-sm-6 inner-grid-4 top-spacing bottom-spacing\">\r\n              <div className=\"col-lg-3 col-sm-2\">\r\n                Server<span className=\"hidden-sm\"> status</span>:\r\n              </div>\r\n              <div className=\"col-lg-1 col-sm-2\">\r\n                <ServerStatus status={endpointStatus} />\r\n              </div>\r\n            </div>\r\n          <div className=\"col-lg-6\">\r\n            <h1 className=\"machine-details__title\">{machine.type + ' ' + machine.name}</h1>\r\n            <div>{machine.group}</div>\r\n            <div className=\"machine-details__operation machine-details__operation--active\">\r\n              Active hours: {(machine.activity.activeHours).toFixed(2)}\r\n            </div>\r\n            <div className=\"machine-details__operation machine-details__operation--idle\">\r\n              Idle hours: {(machine.activity.idleHours).toFixed(2)}\r\n            </div>\r\n            <div className=\"machine-details__operation machine-details__operation--off\">\r\n              Off hours: {(24 - machine.activity.activeHours - machine.activity.idleHours).toFixed(2)}\r\n            </div>\r\n            <div className=\"bottom-spacing\">\r\n              Accurate as of {moment(loadedLast).format('DD/MMM HH:mm:ss')}\r\n            </div>\r\n          </div>\r\n          <div className=\"col-lg-6\">\r\n            <img className=\"machine-details__photo\" src={machine.imageURL} alt=\"\"/>\r\n          </div>\r\n          <div className=\"col-lg-12\">\r\n            <MachineHistoryChart machineHistory={machineHistory} />>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Reducer } from 'redux';\r\nimport {\r\n  IMachinesState,\r\n  MachinesActionTypes,\r\n  GET_MACHINES_REQUEST,\r\n  GET_MACHINES_FAIL,\r\n  GET_MACHINES_SUCCESS,\r\n  GET_MACHINE_BY_ID_REQUEST,\r\n  GET_MACHINE_BY_ID_FAIL,\r\n  GET_MACHINE_BY_ID_SUCCESS,\r\n  GET_MACHINE_HISTORY_FAIL,\r\n  GET_MACHINE_HISTORY_REQUEST,\r\n  GET_MACHINE_HISTORY_SUCCESS\r\n} from './machinesTypes';\r\nimport { MachinesEndpointStatus, Machine } from '../../services/MachineService';\r\n\r\nexport const initialState: IMachinesState = {\r\n  machines: [],\r\n  machinesEndpointStatus: MachinesEndpointStatus.Active,\r\n  machineById: {},\r\n  machineByIdEndpointStatus: MachinesEndpointStatus.Active,\r\n  machineHistoryById: {},\r\n};\r\n\r\nconst reducer: Reducer<IMachinesState, MachinesActionTypes> = (\r\n  state: IMachinesState = initialState,\r\n  action: MachinesActionTypes\r\n) => {\r\n  switch (action.type) {\r\n    case GET_MACHINES_REQUEST:\r\n      return state;\r\n    case GET_MACHINES_FAIL:\r\n      return {\r\n        ...state,\r\n        machinesEndpointStatus: MachinesEndpointStatus.Problem\r\n      };\r\n    case GET_MACHINES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        machines: action.payload.machines,\r\n        machinesLoadedLast: new Date(),\r\n        machinesEndpointStatus: MachinesEndpointStatus.Active\r\n      }\r\n    case GET_MACHINE_BY_ID_REQUEST:\r\n      /**\r\n       * If we've successfully got a list of machines and can't find the individual machine\r\n       * on the state, nor in local storage, try to get it from the list of machines so\r\n       * the user doesn't have to wait a long while for it when first loading the details page\r\n       */\r\n      if (!state.machineById[action.payload.id]) {\r\n        const machineFromList: Machine | undefined = state.machines.find(machine => machine.id === action.payload.id);\r\n        if (machineFromList && state.machinesLoadedLast) {\r\n          return {\r\n            ...state,\r\n            machineById: {\r\n              ...state.machineById,\r\n              [action.payload.id]: {\r\n                machine: machineFromList,\r\n                loadedLast: state.machinesLoadedLast\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return state;\r\n    case GET_MACHINE_BY_ID_FAIL:\r\n      return {\r\n        ...state,\r\n        machineByIdEndpointStatus: MachinesEndpointStatus.Problem\r\n      };\r\n    case GET_MACHINE_BY_ID_SUCCESS:\r\n      const machine = action.payload.machine;\r\n      return {\r\n        ...state,\r\n        machineById: {\r\n          ...state.machineById,\r\n          [machine.id]: {\r\n            machine,\r\n            loadedLast: new Date()\r\n          }\r\n        },\r\n        machineByIdEndpointStatus: MachinesEndpointStatus.Active\r\n      }\r\n    case GET_MACHINE_HISTORY_REQUEST:\r\n    case GET_MACHINE_HISTORY_FAIL:\r\n      return state;\r\n    case GET_MACHINE_HISTORY_SUCCESS:\r\n      const machineHistory = action.payload.machineHistory;\r\n      const id = action.payload.id;\r\n      return {\r\n        ...state,\r\n        machineHistoryById: {\r\n          ...state.machineHistoryById,\r\n          [id]: machineHistory\r\n        }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers, AnyAction, Reducer } from \"redux\";\r\nimport machinesReducer from './machines/machinesReducer';\r\nimport { IMachinesState } from \"./machines/machinesTypes\";\r\n\r\nexport interface IApplicationState {\r\n  machines: IMachinesState;\r\n}\r\n\r\nconst rootReducer: Reducer<IApplicationState, AnyAction> = combineReducers<IApplicationState>({\r\n  machines: machinesReducer,\r\n});\r\n\r\nexport default rootReducer;","import { all } from 'redux-saga/effects';\r\nimport { watchPollMachinesSaga, watchPollMachineByIdSaga } from './machines/machinesActions';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    watchPollMachinesSaga(),\r\n    watchPollMachineByIdSaga()\r\n  ])\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { save, load } from 'redux-localstorage-simple';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport rootReducer from './rootReducer';\r\nimport rootSaga from './rootSaga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst createStoreWithMiddleware\r\n    = applyMiddleware(\r\n        save(),\r\n        sagaMiddleware,\r\n        thunk\r\n    )(createStore)\r\n\r\n\r\nexport const store = createStoreWithMiddleware(rootReducer, load());\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { store } from './store'\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.scss';\nimport { MachinesList } from './pages/MachinesList';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { MachineDetails } from './pages/MachineDetails';\n\nexport const App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <MachinesList />\n            )}\n          />\n          <Route\n            exact\n            path=\"/:machineID\"\n            render={() => (\n              <MachineDetails />\n            )}\n          />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n"],"sourceRoot":""}