{"version":3,"sources":["components/ContentContainer.tsx","components/Input.tsx","math/creditQuotes.ts","components/Calculator.tsx","services/Http.ts","services/CreditLimits.ts","pages/LoanQuote.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["ContentContainer","styled","div","Input","props","className","label","type","value","onChange","e","valueChanged","parseInt","currentTarget","units","getPrincipalForCredit","amount","months","Math","ceil","Calculator","useState","interestRate","setInterestRate","interestForCredit","setInterestForCredit","isCreditPermitted","setIsCreditPermitted","credit","interestRatePercent","isBusinessLoan","isBusinessCredit","useEffect","undefined","amountLeft","principal","Array","map","month","index","interest","getInterestValuesForCredit","constraints","creditType","amountMax","amountMin","durationMax","durationMin","isCreditAllowed","creditConstraints","totalInterest","reduce","accumulator","interestForCurrentMonth","key","moment","add","format","JSON","stringify","creditNotAllowedMessage","http","request","Promise","resolve","fetch","then","response","json","body","CreditLimitsService","get","a","revolvingCreditFacility","revolving_credit_facility","amount_min","amount_max","duration_min","duration_max","businessLoan","business_loan","LoanQuote","Title","h1","setAmount","setMonths","setCreditConstrants","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e3e94f4.chunk.js","sourcesContent":["import styled  from 'styled-components';\r\n\r\nexport const ContentContainer = styled.div`\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 0 16px;\r\n`;\r\n","import React from 'react';\r\nimport styled  from 'styled-components';\r\n\r\nconst Input =  styled.div`\r\n  padding: 12px 0;\r\n  font-weight: bold;\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: left;\r\n\r\n  .label {\r\n    flex-grow: 1;\r\n  }\r\n\r\n  .units {\r\n    width: 100px;\r\n  }\r\n\r\n  input {\r\n    height: 24px;\r\n    font-size: 16px;\r\n    width: 100px;\r\n    border: 2px solid #000;\r\n    margin: 0 12px;\r\n    text-align: right;\r\n  }\r\n`;\r\n\r\ninterface IInputProps {\r\n  label: string;\r\n  units: string;\r\n  value?: number;\r\n  valueChanged: (value: number) => void;\r\n}\r\n\r\nexport default (props: IInputProps) => {\r\n  return (\r\n  <Input>\r\n    <div className=\"label\">{props.label}</div>\r\n    <input\r\n      type=\"number\"\r\n      value={!props.value && props.value !== 0 ? '' : props.value}\r\n      onChange={e => props.valueChanged(parseInt(e.currentTarget.value))}\r\n    />\r\n    <div className=\"units\">(in {props.units})</div>\r\n  </Input>\r\n  )\r\n}","import { CreditConstraints } from \"../services/CreditLimits\";\r\n\r\nexport type Credit = {\r\n  amount: number,\r\n  months: number,\r\n  interestRatePercent: number,\r\n  isBusinessLoan?: boolean\r\n}\r\n\r\nexport const getInterestValuesForCredit = (credit: Credit): number[] => {\r\n  let amountLeft = credit.amount;\r\n  const principal = getPrincipalForCredit(credit.amount, credit.months);\r\n\r\n  return [...new Array(credit.months)].map((month, index) => {\r\n    let interest = Math.ceil((credit.interestRatePercent / 100) * amountLeft);\r\n    if (index === 0 && credit.isBusinessLoan) {\r\n      interest += 1000;\r\n    }\r\n\r\n    amountLeft -= principal;\r\n    return interest;\r\n  });\r\n}\r\n\r\nexport const getPrincipalForCredit = (amount: number, months: number) => Math.ceil(amount / (months || 1));\r\n\r\nexport const isCreditAllowed = (credit: Credit, constraints?: CreditConstraints) => {\r\n  if (!constraints) {\r\n    return true;\r\n  }\r\n\r\n  const creditType: keyof CreditConstraints = credit.isBusinessLoan? 'businessLoan' : 'revolvingCreditFacility';\r\n\r\n  return (\r\n    constraints[creditType].amountMax >= credit.amount &&\r\n    constraints[creditType].amountMin <= credit.amount &&\r\n    constraints[creditType].durationMax >= credit.months &&\r\n    constraints[creditType].durationMin <= credit.months\r\n  )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport styled  from 'styled-components';\r\nimport moment from 'moment';\r\nimport Input from './Input';\r\nimport { getInterestValuesForCredit, getPrincipalForCredit, isCreditAllowed, Credit } from '../math/creditQuotes';\r\nimport { CreditConstraints } from '../services/CreditLimits';\r\n\r\nconst border = `2px solid #000`;\r\n\r\nconst Calculator = styled.div`\r\n  background-color: #eee;\r\n  padding: 20px;\r\n\r\n  .interest-rate {\r\n    width: 330px;\r\n  }\r\n\r\n  .quote-table {\r\n    margin-top: 20px;\r\n    background-color: #fff;\r\n    border: ${border}\r\n    border-collapse: collapse;\r\n    font-weight: bold;\r\n\r\n    th, td {\r\n      padding: 6px;\r\n    }\r\n\r\n    th {\r\n      background-color: #dadada;\r\n    }\r\n\r\n    tr:nth-child(odd) {background: #eee}\r\n    tr:nth-child(even) {background: #fff}\r\n\r\n    th:not(:last-child), td:not(:last-child) {\r\n      border-right: ${border}\r\n    }\r\n  }\r\n\r\n  .credit-type {\r\n    text-align: center;\r\n    font-weight: normal;\r\n  }\r\n`;\r\n\r\ninterface ICalculatorProps {\r\n  amount: number;\r\n  months: number;\r\n  isBusinessCredit?: boolean;\r\n  creditConstraints?: CreditConstraints;\r\n}\r\n\r\nexport default (props: ICalculatorProps) => {\r\n  const [interestRate, setInterestRate] = useState<number>(3);\r\n  const [interestForCredit, setInterestForCredit] = useState<number[]>([]);\r\n  const [isCreditPermitted, setIsCreditPermitted] = useState<boolean>(false);\r\n\r\n  const credit: Credit = {\r\n    amount: props.amount,\r\n    months: props.months,\r\n    interestRatePercent: 0,\r\n    isBusinessLoan: props.isBusinessCredit\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (interestRate !== undefined && props.amount && props.months) {\r\n      credit.interestRatePercent = interestRate;\r\n\r\n      setInterestForCredit(getInterestValuesForCredit(credit));\r\n\r\n      setIsCreditPermitted(isCreditAllowed(credit, props.creditConstraints));\r\n    }\r\n  }, [interestRate, props.amount, props.months, props.creditConstraints]);\r\n\r\n  const principal = getPrincipalForCredit(props.amount, props.months);\r\n\r\n  const totalInterest = interestForCredit.reduce((accumulator, interestForCurrentMonth) => accumulator + interestForCurrentMonth, 0)\r\n\r\n  return (\r\n    <Calculator>\r\n      {isCreditPermitted ?\r\n        <>\r\n          <div className=\"interest-rate center-within-parent\">\r\n            <Input label=\"Interest rate\" units=\"%\" value={interestRate} valueChanged={setInterestRate} />\r\n          </div>\r\n          <table className=\"quote-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Repayment date</th>\r\n                <th>Principal</th>\r\n                <th>Interest</th>\r\n                <th>Total repayment</th>\r\n              </tr>\r\n            </thead>\r\n            {props.amount && props.months && interestRate ?\r\n              <tbody>\r\n                  {interestForCredit.map((interest, index) => (\r\n                    <tr key={index}>\r\n                      <td>{moment().add(index + 1, 'M').format('DD/MM/YYYY')}</td>\r\n                      <td>£{principal}</td>\r\n                      <td>£{interest}</td>\r\n                      <td>£{principal + interest}</td>\r\n                    </tr>\r\n                  ))}\r\n                <tr>\r\n                  <td>Total</td>\r\n                  <td>£{props.amount}</td>\r\n                  <td>£{totalInterest}</td>\r\n                  <td>£{props.amount + totalInterest}</td>\r\n                </tr>\r\n              </tbody>\r\n            : null}\r\n          </table>\r\n        </>\r\n      : creditNotAllowedMessage(credit, props.creditConstraints)}\r\n      <h2 className=\"credit-type\">{props.isBusinessCredit ? 'Business Loan' : 'Revolving Credit Facility'}</h2>\r\n    </Calculator>\r\n  );\r\n}\r\n\r\nfunction creditNotAllowedMessage (credit: Credit, constraints?: CreditConstraints) {\r\n  const creditType: keyof CreditConstraints = credit.isBusinessLoan? 'businessLoan' : 'revolvingCreditFacility'\r\n\r\n  /**\r\n   * Format this nicely for a human\r\n   */\r\n  return <div>\r\n    <p><b>This credit is not allowed for your selected options.</b></p>\r\n    <>{constraints\r\n      ? <div>Please select something within these limits: <pre>{JSON.stringify(constraints[creditType], null, 4)}</pre></div>\r\n    : null}</>\r\n  </div>\r\n}","export const http = <T>(request: RequestInfo): Promise<T> => {\r\n  return new Promise((resolve) => {\r\n    fetch(request)\r\n      .then(response => response.json())\r\n      .then(body => {\r\n        resolve(body);\r\n      });\r\n  });\r\n};","import { http } from './Http';\r\n\r\ntype CreditLimitResponseConstraint = {\r\n  amount_min: number;\r\n  amount_max: number;\r\n  duration_min: number;\r\n  duration_max: number;\r\n}\r\n\r\ntype CreditLimitResponse = {\r\n  revolving_credit_facility: CreditLimitResponseConstraint;\r\n  business_loan: CreditLimitResponseConstraint;\r\n}\r\n\r\ntype CreditConstraint = {\r\n  amountMin: number;\r\n  amountMax: number;\r\n  durationMin: number;\r\n  durationMax: number;\r\n}\r\n\r\nexport type CreditConstraints = {\r\n  revolvingCreditFacility: CreditConstraint;\r\n  businessLoan: CreditConstraint;\r\n}\r\n\r\nexport class CreditLimitsService {\r\n  public static get = async ():Promise<CreditConstraints> => {\r\n    const response: CreditLimitResponse = await http<CreditLimitResponse>('https://www.mocky.io/v2/5d4aa9e93300006f000f5ea9');\r\n\r\n    return {\r\n      revolvingCreditFacility: {\r\n        amountMin: response.revolving_credit_facility.amount_min,\r\n        amountMax: response.revolving_credit_facility.amount_max,\r\n        durationMin: response.revolving_credit_facility.duration_min,\r\n        durationMax: response.revolving_credit_facility.duration_max,\r\n      },\r\n      businessLoan: {\r\n        amountMin: response.business_loan.amount_min,\r\n        amountMax: response.business_loan.amount_max,\r\n        durationMin: response.business_loan.duration_min,\r\n        durationMax: response.business_loan.duration_max,\r\n      }\r\n    }\r\n  }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport styled  from 'styled-components';\r\nimport { ContentContainer } from '../components/ContentContainer';\r\nimport Calculator from '../components/Calculator';\r\nimport Input from '../components/Input';\r\nimport { CreditLimitsService, CreditConstraints } from '../services/CreditLimits';\r\n\r\nconst LoanQuote =  styled.div`\r\n  .credit-params-section {\r\n    margin-bottom: 40px;\r\n  }\r\n\r\n  .loan-calculators {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-column-gap: 40px;\r\n\r\n    @media (max-width: 1000px) {\r\n      grid-template-columns: 1fr;\r\n      grid-row-gap: 30px;\r\n    }\r\n  }\r\n`;\r\n/** ^ for a properly responsive solution, make media queries global */\r\n\r\nconst Title = styled.h1`\r\n  text-align: left;\r\n`;\r\n\r\n\r\nexport default () => {\r\n  const [amount, setAmount] = useState<number>(10000);\r\n  const [months, setMonths] = useState<number>(4);\r\n  const [creditConstraints, setCreditConstrants] = useState<CreditConstraints>();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const creditConstraints = await CreditLimitsService.get();\r\n      setCreditConstrants(creditConstraints);\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <LoanQuote>\r\n      <ContentContainer>\r\n        <Title>Your loan</Title>\r\n        <div className=\"credit-params-section\">\r\n          <div className=\"center-within-parent\">\r\n            <Input label=\"Amount requested\" units=\"£\" value={amount} valueChanged={setAmount} />\r\n            <Input label=\"Duration\" units=\"months\" value={months} valueChanged={setMonths} />\r\n          </div>\r\n        </div>\r\n        <div className=\"center-within-parent\">\r\n          <div className=\"loan-calculators\">\r\n            <Calculator amount={amount} months={months} creditConstraints={creditConstraints}/>\r\n            <Calculator amount={amount} months={months} creditConstraints={creditConstraints} isBusinessCredit={true} />\r\n          </div>\r\n        </div>\r\n      </ContentContainer>\r\n    </LoanQuote>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport LoanQuote from './pages/LoanQuote';\r\n\r\nexport default () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <LoanQuote />\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}